import net.mamoe.jpre.binary.Pack;

import java.util.LinkedList;

import static net.mamoe.jpre.binary.Binary.toInt;

/**
 * @author Him188 @ JPRE
 * @since JPRE 1.0.0
 */
public class TestPacket {
    public static void main(String[] args) {
        Pack pack = new Pack(new byte[]{8, -35, -72, -28, 118, 0, 0, 0, 0, 73, 6, 0, 0, 0, 2, -35, -72, -28, 118, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 31, -30, -10, 37, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 23, 60, 63, 120, 109, 108, 32, 118, 101, 114, 115, 105, 111, 110, 61, 39, 49, 46, 48, 39, 32, 101, 110, 99, 111, 100, 105, 110, 103, 61, 39, 85, 84, 70, 45, 56, 39, 32, 115, 116, 97, 110, 100, 97, 108, 111, 110, 101, 61, 39, 121, 101, 115, 39, 32, 63, 62, 32, 60, 109, 115, 103, 32, 116, 101, 109, 112, 108, 97, 116, 101, 73, 68, 61, 34, 49, 50, 51, 34, 32, 115, 101, 114, 118, 105, 99, 101, 73, 68, 61, 34, 49, 34, 32, 97, 99, 116, 105, 111, 110, 61, 34, 112, 108, 117, 103, 105, 110, 34, 32, 97, 99, 116, 105, 111, 110, 68, 97, 116, 97, 61, 34, 65, 112, 112, 67, 109, 100, 58, 47, 47, 79, 112, 101, 110, 67, 111, 110, 116, 97, 99, 116, 73, 110, 102, 111, 47, 63, 117, 105, 110, 61, 34, 32, 97, 95, 97, 99, 116, 105, 111, 110, 68, 97, 116, 97, 61, 34, 109, 113, 113, 97, 112, 105, 58, 47, 47, 99, 97, 114, 100, 47, 115, 104, 111, 119, 95, 112, 115, 108, 99, 97, 114, 100, 63, 115, 114, 99, 95, 116, 121, 112, 101, 61, 105, 110, 116, 101, 114, 110, 97, 108, 38, 97, 109, 112, 59, 115, 111, 117, 114, 99, 101, 61, 115, 104, 97, 114, 101, 99, 97, 114, 100, 38, 97, 109, 112, 59, 118, 101, 114, 115, 105, 111, 110, 61, 49, 38, 97, 109, 112, 59, 117, 105, 110, 61, 53, 54, 52, 49, 52, 48, 57, 55, 55, 34, 32, 105, 95, 97, 99, 116, 105, 111, 110, 68, 97, 116, 97, 61, 34, 109, 113, 113, 97, 112, 105, 58, 47, 47, 99, 97, 114, 100, 47, 115, 104, 111, 119, 95, 112, 115, 108, 99, 97, 114, 100, 63, 115, 114, 99, 95, 116, 121, 112, 101, 61, 105, 110, 116, 101, 114, 110, 97, 108, 38, 97, 109, 112, 59, 115, 111, 117, 114, 99, 101, 61, 115, 104, 97, 114, 101, 99, 97, 114, 100, 38, 97, 109, 112, 59, 118, 101, 114, 115, 105, 111, 110, 61, 49, 38, 97, 109, 112, 59, 117, 105, 110, 61, 53, 54, 52, 49, 52, 48, 57, 55, 55, 34, 32, 98, 114, 105, 101, 102, 61, 34, -49, -75, -51, -77, -49, -5, -49, -94, -93, -95, 34, 32, 102, 108, 97, 103, 61, 34, 51, 34, 32, 117, 114, 108, 61, 34, 34, 62, 32, 60, 105, 116, 101, 109, 32, 98, 103, 61, 34, 48, 34, 32, 108, 97, 121, 111, 117, 116, 61, 34, 52, 34, 62, 32, 60, 112, 105, 99, 116, 117, 114, 101, 32, 99, 111, 118, 101, 114, 61, 34, 104, 116, 116, 112, 58, 47, 47, 116, 46, 99, 110, 47, 82, 74, 65, 97, 110, 55, 52, 34, 47, 62, 32, 60, 116, 105, 116, 108, 101, 32, 115, 105, 122, 101, 61, 34, 51, 48, 34, 32, 99, 111, 108, 111, 114, 61, 34, 35, 70, 70, 66, 54, 67, 49, 34, 62, -47, -31, -66, -21, 60, 47, 116, 105, 116, 108, 101, 62, 60, 47, 105, 116, 101, 109, 62, 32, 60, 105, 116, 101, 109, 62, 60, 104, 114, 62, 60, 47, 104, 114, 62, 32, 60, 115, 117, 109, 109, 97, 114, 121, 32, 99, 111, 108, 111, 114, 61, 34, 35, 54, 52, 57, 53, 69, 68, 34, 62, 49, 60, 47, 115, 117, 109, 109, 97, 114, 121, 62, 32, 60, 115, 117, 109, 109, 97, 114, 121, 32, 99, 111, 108, 111, 114, 61, 34, 35, 56, 55, 67, 69, 69, 66, 34, 62, 49, 50, 60, 47, 115, 117, 109, 109, 97, 114, 121, 62, 32, 60, 115, 117, 109, 109, 97, 114, 121, 32, 99, 111, 108, 111, 114, 61, 34, 35, 49, 57, 49, 57, 55, 48, 34, 62, 49, 50, 51, 60, 47, 115, 117, 109, 109, 97, 114, 121, 62, 32, 60, 47, 105, 116, 101, 109, 62, 32, 60, 105, 116, 101, 109, 62, 60, 104, 114, 62, 60, 47, 104, 114, 62, 60, 115, 117, 109, 109, 97, 114, 121, 32, 99, 111, 108, 111, 114, 61, 34, 35, 69, 69, 56, 50, 69, 69, 34, 62, 50, 48, 49, 55, 47, 50, 47, 54, 47, 50, 51, 58, 53, 54, 60, 47, 115, 117, 109, 109, 97, 114, 121, 62, 60, 47, 105, 116, 101, 109, 62, 32, 60, 115, 111, 117, 114, 99, 101, 32, 110, 97, 109, 101, 61, 34, -61, -5, -58, -84, -73, -42, -49, -19, 34, 32, 105, 99, 111, 110, 61, 34, -49, -75, -51, -77, -49, -5, -49, -94, 34, 32, 47, 62, 32, 60, 47, 109, 115, 103, 62, 3, 0, 0, 0, 2, 48, 48, 127, 127, 127, 127});
        System.out.println(pack.getByte());
        System.out.println(pack.getLong());

        System.out.println(pack.getByte());

        System.out.println(getRawList(pack));
    }

    private static int getInt(Pack pack) {
        return toInt((pack.getBytes(4)));
        //return (int) getLong();
    }

    private static Object getRaw(Pack pack) {
        switch (pack.getByte()) {
            case 0:
                return getInt(pack);
            case 1:
                return pack.getByte();
            case 2:
                return pack.getLong();
            case 3:
                return pack.getString();
            case 4:
                return pack.getBoolean();
            case 5:
                return pack.getDouble();
            case 6:
                return pack.getShort();
            case 7:
                return pack.getFloat();
            case 8:
            case 9:
                return pack.getBytes(getInt(pack));
            default:
                throw new IllegalArgumentException("wrong type of values");
        }
    }

    private static LinkedList<Object> getRawList(Pack pack) {
        LinkedList<Object> result = new LinkedList<>();
        int count = pack.getInt();
        System.out.println("[Pack] getRawList: " + count);
        for (int i = 0; i < count; i++) {
            result.add(getRaw(pack));
        }

        return result;
    }
}
